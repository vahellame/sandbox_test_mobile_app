analyzer:
  exclude:
    - "**/*.freezed.dart"
    - "**/*.g.dart"
    - "**/generated/**"
    - "lib/firebase_options.dart"
    - "test/**"
  language:
    strict-casts: false
    strict-inference: false
    strict-raw-types: true
  strong-mode:
    implicit-casts: false

linter: #
  # All rules https://dart.dev/tools/linter-rules/all
  rules:
    always_declare_return_types: true
    always_put_required_named_parameters_first: true
    always_require_non_null_named_parameters: true
    annotate_overrides: true
    avoid_annotating_with_dynamic: true
    avoid_bool_literals_in_conditional_expressions: true
    avoid_catching_errors: true
    avoid_double_and_int_checks: true
    avoid_dynamic_calls: true
    avoid_empty_else: true
    avoid_equals_and_hash_code_on_mutable_classes: true
    avoid_escaping_inner_quotes: true
    avoid_field_initializers_in_const_classes: true
    avoid_final_parameters: true
    avoid_implementing_value_types: true
    avoid_init_to_null: true
    avoid_js_rounded_ints: true
    avoid_multiple_declarations_per_line: true
    avoid_null_checks_in_equality_operators: true
    avoid_print: true
    avoid_private_typedef_functions: true
    avoid_redundant_argument_values: true
    avoid_relative_lib_imports: true
    avoid_renaming_method_parameters: true
    avoid_return_types_on_setters: true
    avoid_returning_null: true
    avoid_returning_null_for_future: true
    avoid_returning_null_for_void: true
    avoid_returning_this: true
    avoid_shadowing_type_parameters: true
    avoid_single_cascade_in_expression_statements: true
    avoid_slow_async_io: true
    avoid_type_to_string: true
    avoid_types_as_parameter_names: true
    avoid_types_on_closure_parameters: true
    avoid_unnecessary_containers: true
    avoid_unused_constructor_parameters: true
    avoid_void_async: true
    avoid_web_libraries_in_flutter: true
    await_only_futures: true
    camel_case_extensions: true
    camel_case_types: true
    cancel_subscriptions: true
    cast_nullable_to_non_nullable: true
    close_sinks: true
    collection_methods_unrelated_type: true
    combinators_ordering: true
    comment_references: true
    conditional_uri_does_not_exist: true
    constant_identifier_names: true
    control_flow_in_finally: true
    curly_braces_in_flow_control_structures: true
    dangling_library_doc_comments: true
    depend_on_referenced_packages: true
    deprecated_consistency: true
    deprecated_member_use_from_same_package: true
    directives_ordering: true

    # Will enable when we will be ready
    discarded_futures: false

    do_not_use_environment: true
    empty_catches: true
    empty_constructor_bodies: true
    empty_statements: true
    eol_at_end_of_file: true
    exhaustive_cases: true
    file_names: true
    flutter_style_todos: true
    hash_and_equals: true
    implementation_imports: true
    implicit_call_tearoffs: true
    implicit_reopen: true
    invalid_case_patterns: true
    join_return_with_assignment: true
    leading_newlines_in_multiline_strings: true
    library_annotations: true
    library_names: true
    library_prefixes: true
    library_private_types_in_public_api: true
    literal_only_boolean_expressions: true
    matching_super_parameters: true
    no_adjacent_strings_in_list: true
    no_default_cases: true
    no_duplicate_case_values: true
    no_leading_underscores_for_library_prefixes: true
    no_leading_underscores_for_local_identifiers: true
    no_literal_bool_comparisons: true
    no_logic_in_create_state: true
    no_self_assignments: true
    no_wildcard_variable_uses: true
    non_constant_identifier_names: true
    noop_primitive_operations: true
    null_check_on_nullable_type_parameter: true
    null_closures: true
    only_throw_errors: true
    overridden_fields: true
    package_api_docs: true
    package_names: true
    package_prefixed_library_names: true
    prefer_adjacent_string_concatenation: true
    prefer_asserts_in_initializer_lists: true
    prefer_collection_literals: true
    prefer_conditional_assignment: true
    prefer_const_constructors: true
    prefer_const_constructors_in_immutables: true
    prefer_const_declarations: true
    prefer_const_literals_to_create_immutables: true
    prefer_constructors_over_static_methods: true
    prefer_contains: true
    prefer_final_fields: true
    prefer_final_in_for_each: true
    prefer_final_locals: true
    prefer_for_elements_to_map_fromIterable: true
    prefer_function_declarations_over_variables: true
    prefer_generic_function_type_aliases: true
    prefer_if_null_operators: true
    prefer_initializing_formals: true
    prefer_inlined_adds: true
    prefer_int_literals: true
    prefer_interpolation_to_compose_strings: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    prefer_is_not_operator: true
    prefer_iterable_whereType: true
    prefer_mixin: true
    prefer_null_aware_method_calls: true
    prefer_null_aware_operators: true
    prefer_relative_imports: true
    prefer_single_quotes: true
    prefer_spread_collections: true
    prefer_typing_uninitialized_variables: true
    prefer_void_to_null: true
    provide_deprecation_message: true
    recursive_getters: true
    secure_pubspec_urls: true
    sized_box_for_whitespace: true
    sized_box_shrink_expand: true
    slash_for_doc_comments: true
    sort_child_properties_last: true
    sort_constructors_first: true
    sort_unnamed_constructors_first: true
    test_types_in_equals: true
    throw_in_finally: true
    tighten_type_of_initializing_formals: true
    type_annotate_public_apis: true
    type_init_formals: true
    type_literal_in_constant_pattern: true

    # Will enable when we will be ready
    unawaited_futures: false

    unnecessary_await_in_return: true
    unnecessary_brace_in_string_interps: true
    unnecessary_breaks: true
    unnecessary_const: true
    unnecessary_constructor_name: true
    unnecessary_getters_setters: true
    unnecessary_lambdas: true
    unnecessary_late: true
    unnecessary_library_directive: true
    unnecessary_new: true
    unnecessary_null_aware_assignments: true
    unnecessary_null_aware_operator_on_extension_on_nullable: true
    unnecessary_null_checks: true
    unnecessary_null_in_if_null_operators: true
    unnecessary_nullable_for_final_variable_declarations: true
    unnecessary_overrides: true
    unnecessary_parenthesis: true
    unnecessary_raw_strings: true
    unnecessary_statements: true
    unnecessary_string_escapes: true
    unnecessary_string_interpolations: true
    unnecessary_this: true
    unnecessary_to_list_in_spreads: true
    unreachable_from_main: true
    unrelated_type_equality_checks: true
    unsafe_html: true
    use_build_context_synchronously: true
    use_colored_box: true
    use_decorated_box: true
    use_enums: true
    use_full_hex_values_for_flutter_colors: true
    use_function_type_syntax_for_parameters: true
    use_is_even_rather_than_modulo: true
    use_key_in_widget_constructors: true
    use_late_for_private_fields_and_variables: true
    use_named_constants: true
    use_raw_strings: true
    use_rethrow_when_possible: true
    use_setters_to_change_properties: true
    use_string_buffers: true
    use_string_in_part_of_directives: true
    use_super_parameters: true
    use_test_throws_matchers: true
    use_to_and_as_if_applicable: true
    valid_regexps: true
    void_checks: true

    # Disabled rules
    prefer_double_quotes: false # We use single quotes for all
    always_use_package_imports: false # We use relative imports for all
    public_member_api_docs: false # We prefer not to write docs
    lines_longer_than_80_chars: false # We use 100 characters per line
    always_specify_types: false # const and final make this unnecessary
    unnecessary_final: false # final is preferred over var
    cascade_invocations: false # Code starts to look too weird
    prefer_final_parameters: false # Not inclined to mark all parameters as final
    avoid_classes_with_only_static_members: false # We use classes to group constants
    prefer_expression_function_bodies: false # Sometimes it compromises readability
    avoid_catches_without_on_clauses: false # Not needed in our case
    omit_local_variable_types: false # It generates var, and does so indiscriminately
    diagnostic_describe_all_properties: false # Prefer not to do this
    missing_whitespace_between_adjacent_strings: false # Sometimes not needed
    always_put_control_body_on_new_line: false # Sometimes not needed
    require_trailing_commas: false # We follow this rule from DCM
    avoid_positional_boolean_parameters: false # Not inclined to make the change
    no_runtimeType_toString: false # We find it necessary
    sort_pub_dependencies: false # We sort dependencies manually
    prefer_asserts_with_message: false # Prefer not to write additional docs
    one_member_abstracts: false # See no issue with this
    avoid_setters_without_getters: false # Find this acceptable
    prefer_foreach: false # Not needed in our case
    prefer_if_elements_to_conditional_expressions: false # We like conditional expressions
    parameter_assignments: false # Sometimes it's acceptable
    use_if_null_to_convert_nulls_to_bools: false # Sometimes it's acceptable
    avoid_function_literals_in_foreach_calls: false # See no issue with this


dart_code_metrics:
  formatter:
    indent: 0
    line-length: 100
    cascading-widget-extensions: true

  # Pubspec rules
  # All rules https://github.com/CQLabs/dart-code-metrics-presets/blob/main/lib/pub.yaml
  pubspec-rules:
    prefer-publish-to-none: true
    prefer-correct-package-name: false # We don't have one
    prefer-semver-version: true
    avoid-dependency-overrides: true
    prefer-caret-version-syntax: true
    avoid-any-version: true
    prefer-correct-screenshots: true
    banned-dependencies: false # We don't have one

  rules: #
    # Dart rules
    # All rules https://github.com/CQLabs/dart-code-metrics-presets/blob/main/lib/dart_all.yaml
    avoid-substring: true
    avoid-banned-imports: true
    avoid-cascade-after-if-null: true
    avoid-collection-methods-with-unrelated-types: true
    avoid-duplicate-exports: true
    avoid-dynamic: true
    avoid-global-state: true
    avoid-missing-enum-constant-in-map: true
    avoid-redundant-async: true
    avoid-throw-in-catch-block: true
    avoid-top-level-members-in-tests: true
    avoid-unnecessary-type-assertions: true
    avoid-unnecessary-type-casts: true
    avoid-unrelated-type-assertions: true
    avoid-unused-parameters: true
    binary-expression-operand-order: true
    double-literal-format: true
    newline-before-return: true
    no-boolean-literal-compare: true
    no-equal-then-else: true
    no-object-declaration: true
    prefer-commenting-analyzer-ignores: true
    prefer-correct-test-file-name: true
    prefer-correct-type-name: true
    prefer-enums-by-name: true
    prefer-first: true
    prefer-immediate-return: true
    prefer-iterable-of: true
    prefer-last: true
    prefer-trailing-comma: true
    tag-name: true
    avoid-duplicate-named-imports: true
    prefer-return-await: true
    avoid-collapsible-if: true
    avoid-explicit-type-declaration: true
    avoid-nested-switches: true
    avoid-redundant-else: true
    avoid-self-assignment: true
    avoid-self-compare: true
    avoid-unnecessary-nullable-return-type: true
    avoid-unrelated-type-casts: true
    format-test-name: true
    no-equal-switch-case: true
    no-equal-conditions: true

    # Will enable when we will be ready
    prefer-declaring-const-constructor: false

    prefer-explicit-parameter-names: true
    avoid-equal-expressions: true
    avoid-declaring-call-method: true

    # Will enable when we will be ready
    prefer-early-return: false

    avoid-missed-calls: true
    avoid-redundant-pragma-inline: true
    prefer-unwrapping-future-or: true
    avoid-unnecessary-negations: true
    avoid-banned-file-names: true
    avoid-unused-generics: true
    avoid-inverted-boolean-checks: true
    avoid-banned-types: true
    function-always-returns-null: true
    prefer-visible-for-testing-on-members: true
    avoid-throw-objects-without-tostring: true
    avoid-one-field-records: true
    move-records-to-typedefs: true
    avoid-bottom-type-in-records: true
    avoid-nested-records: true
    avoid-function-type-in-records: true
    avoid-positional-record-field-access: true
    avoid-mixing-named-and-positional-fields: true
    avoid-long-records: true
    match-positional-field-names-on-assignment: true
    avoid-redundant-positional-field-name: true
    avoid-nested-switch-expressions: true
    avoid-bottom-type-in-patterns: true
    avoid-explicit-pattern-field-name: true
    prefer-wildcard-pattern: true
    no-equal-switch-expression-cases: true
    prefer-simpler-patterns-null-check: true
    avoid-duplicate-patterns: true

    # Will enable when we will be ready
    prefer-returning-conditional-expressions: false

    avoid-unnecessary-return: true
    avoid-future-tostring: true
    avoid-unassigned-late-fields-keyword: true
    prefer-test-matchers: true
    prefer-correct-future-return-type: true
    prefer-correct-stream-return-type: true
    avoid-nested-futures: true
    avoid-nested-streams-and-futures: true
    avoid-accessing-other-classes-private-members: true
    avoid-generics-shadowing: true
    avoid-uncaught-future-errors: true
    prefer-parentheses-with-if-null: true
    prefer-type-over-var: true
    avoid-keywords-in-wildcard-pattern: true
    avoid-misused-wildcard-pattern: true
    avoid-unnecessary-call: true
    no-equal-nested-conditions: true
    avoid-unnecessary-futures: true
    avoid-shadowed-extension-methods: true
    avoid-barrel-files: true
    avoid-importing-entrypoint-exports: true
    avoid-double-slash-imports: true
    avoid-unnecessary-conditionals: true
    missing-test-assertion: true
    avoid-map-keys-contains: true
    prefer-correct-json-casts: true
    avoid-duplicate-mixins: true
    avoid-unused-instances: true
    prefer-correct-for-loop-increment: true
    prefer-public-exception-classes: true
    match-class-name-pattern: true
    newline-before-case: true
    avoid-unnecessary-reassignment: true
    avoid-referencing-discarded-variables: true
    avoid-unconditional-break: true
    avoid-weak-cryptographic-algorithms: true
    avoid-identical-exception-handling-blocks: true
    avoid-unnecessary-if: true
    avoid-passing-default-values: true

    # Flutter rules
    # All rules https://github.com/CQLabs/dart-code-metrics-presets/blob/main/lib/flutter_all.yaml
    prefer-define-hero-tag: true
    always-remove-listener: true
    avoid-shrink-wrap-in-lists: true
    avoid-unnecessary-setstate: true
    avoid-expanded-as-spacer: true
    check-for-equals-in-render-object-setters: true
    consistent-update-render-object: true
    prefer-correct-edge-insets-constructor: true
    prefer-using-list-view: true
    use-setstate-synchronously: true
    avoid-incomplete-copy-with: true
    proper-super-calls: true
    add-copy-with: true
    dispose-fields: true
    prefer-action-button-tooltip: true
    avoid-inherited-widget-in-initstate: true
    avoid-late-context: true
    avoid-state-constructors: true
    avoid-unnecessary-stateful-widgets: true
    avoid-stateless-widget-initialized-fields: true
    avoid-unnecessary-overrides-in-state: true
    avoid-recursive-widget-calls: true

    # Provider rules
    # All rules https://github.com/CQLabs/dart-code-metrics-presets/blob/main/lib/provider.yaml
    avoid-instantiating-in-value-provider: true
    avoid-read-inside-build: true
    avoid-watch-outside-build: true
    dispose-providers: true
    prefer-multi-provider: true

    # GetIt rules
    # All rules https://github.com/CQLabs/dart-code-metrics-presets/blob/main/lib/get_it.yaml
    avoid-functions-in-register-singleton: true

    # Custom setups
    member-ordering:
      order:
        - constructors
        - named-constructor
        - static-fields
        - final-fields
        - fields
        - methods
        - dispose-method
      widgets-order:
        - constructor
        - named-constructor
        - static-fields
        - final-fields
        - fields
        - init-state-method
        - build-method
        - methods
        - dispose-method

    arguments-ordering:
      child-last: true

    prefer-single-widget-per-file:
      ignore-private-widgets: true

    prefer-conditional-expressions:
      ignore-nested: true

    prefer-widget-private-members:
      ignore-static: true


    # Disabled rules
    ban-name: false # Deprecated
    avoid-async-call-in-sync-function: # Our code is too beautiful to use this
    no-equal-arguments: false # Not applicable for us
    avoid-returning-widgets: false # We are too lazy to create classes
    prefer-moving-to-variable: false # We are too lazy to move variables and sometimes it's not applicable for us
    avoid-border-all: false # Not applicable for us
    prefer-const-border-radius: false # Not applicable for us
    prefer-extracting-callbacks: false # Not applicable for us
    avoid-late-keyword: false # Using late is good for us
    prefer-match-file-name: false # We are too lazy to extract all into separate files
    prefer-correct-identifier-length: false # Not applicable for us
    prefer-async-await: false # We need [then]
    avoid-ignoring-return-values: false # Not applicable for us
    no-magic-number: false # Not applicable for us
    avoid-non-null-assertion: false # Not applicable for us
    avoid-passing-async-when-sync-expected: false # Not applicable for us
    avoid-wrapping-in-padding: false # We are too lazy to check this
    no-empty-block: false # Not applicable for us
    format-comment: false # Not applicable for us
    prefer-static-class: false  # We are too lazy to put everything in classes
    avoid-non-ascii-symbols: false # We are too lazy to extract all non-ascii symbols
    avoid-long-functions: false # Not applicable for us
    avoid-negated-conditions: false  # Not applicable for us
    avoid-shadowing: false # Not applicable for us
    map-keys-ordering: false # Not applicable for us
    avoid-similar-names: false # We need this functionality
    avoid-unsafe-collection-methods: false # We need this functionality
    prefer-correct-error-name: false # Not applicable for us
    enum-constants-ordering: false # We need this functionality
    avoid-nullable-interpolation: false # If it's null, I want to see it
    prefer-correct-switch-length: false # Not applicable for us
    avoid-long-parameter-list: false # Not applicable for us
    prefer-named-boolean-parameters: # We need this functionality
    avoid-mutating-parameters: false # We need this functionality
    avoid-empty-setstate: false # We need this
    prefer-text-rich: false # We are too lazy to use it
    prefer-dedicated-media-query-methods: false # We need this
    avoid-missing-image-alt: false # We don't need it
    avoid-nested-conditional-expressions: false # We need this
    unnecessary-trailing-comma: false # We need to specify this manually

